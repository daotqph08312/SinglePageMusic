package com.angular.model;
// Generated Apr 30, 2020 5:58:29 PM by Hibernate Tools 4.3.5.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;

/**
 * Song generated by hbm2java
 */
@Entity
@Table(name = "song", catalog = "singlepagemusic")
public class Song implements java.io.Serializable {
	private static final long serialVersionUID = 1L;
	  Integer id;
	  Album album;
	  Category category;
	  Singer singer;
	  String name;
	  String lysic;
	  String timeplay;
	  String link;
	  String image;
	  long viewcount;
	  Date datepublish;
	  Set<Playlistdetail> playlistdetails = new HashSet<Playlistdetail>(0);

	public Song() {
	}

	public Song(Category category, Singer singer, String name, long viewcount, Date datepublish) {
		this.category = category;
		this.singer = singer;
		this.name = name;
		this.viewcount = viewcount;
		this.datepublish = datepublish;
	}

	public Song(Album album, Category category, Singer singer, String name, String lysic, String timeplay, String link,
			String image, long viewcount, Date datepublish, Set<Playlistdetail> playlistdetails) {
		this.album = album;
		this.category = category;
		this.singer = singer;
		this.name = name;
		this.lysic = lysic;
		this.timeplay = timeplay;
		this.link = link;
		this.image = image;
		this.viewcount = viewcount;
		this.datepublish = datepublish;
		this.playlistdetails = playlistdetails;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "idalbum")
	public Album getAlbum() {
		return this.album;
	}

	public void setAlbum(Album album) {
		this.album = album;
	}
	@JsonIgnore
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "idcategory", nullable = false)
	public Category getCategory() {
		return this.category;
	}
	
	public void setCategory(Category category) {
		this.category = category;
	}
	 
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "idsinger", nullable = false)
	public Singer getSinger() {
		return this.singer;
	}

	public void setSinger(Singer singer) {
		this.singer = singer;
	}

	@Column(name = "name", nullable = false, length = 50)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "lysic", length = 3000)
	public String getLysic() {
		return this.lysic;
	}

	public void setLysic(String lysic) {
		this.lysic = lysic;
	}

	@Column(name = "timeplay", length = 10)
	public String getTimeplay() {
		return this.timeplay;
	}

	public void setTimeplay(String timeplay) {
		this.timeplay = timeplay;
	}

	@Column(name = "link", length = 65535)
	public String getLink() {
		return this.link;
	}

	public void setLink(String link) {
		this.link = link;
	}

	@Column(name = "image", length = 500)
	public String getImage() {
		return this.image;
	}

	public void setImage(String image) {
		this.image = image;
	}

	@Column(name = "viewcount", nullable = false)
	public long getViewcount() {
		return this.viewcount;
	}

	public void setViewcount(long viewcount) {
		this.viewcount = viewcount;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "datepublish", nullable = false, length = 10)
	public Date getDatepublish() {
		return this.datepublish;
	}

	public void setDatepublish(Date datepublish) {
		this.datepublish = datepublish;
	}
	@JsonIgnore
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "song")
	public Set<Playlistdetail> getPlaylistdetails() {
		return this.playlistdetails;
	}
	
	public void setPlaylistdetails(Set<Playlistdetail> playlistdetails) {
		this.playlistdetails = playlistdetails;
	}

}
